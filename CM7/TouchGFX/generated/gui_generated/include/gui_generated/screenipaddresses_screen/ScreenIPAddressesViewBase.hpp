/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SCREENIPADDRESSESVIEWBASE_HPP
#define SCREENIPADDRESSESVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/screenipaddresses_screen/ScreenIPAddressesPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <gui/containers/NumberPICKER.hpp>

class ScreenIPAddressesViewBase : public touchgfx::View<ScreenIPAddressesPresenter>
{
public:
    ScreenIPAddressesViewBase();
    virtual ~ScreenIPAddressesViewBase();
    virtual void setupScreen();
    virtual void handleTickEvent();

    /*
     * Custom Actions
     */
    virtual void actionWriteCounterValue(uint8_t value)
    {
        // Override and implement this function in Screen1
    }
    
    virtual void actionSelectAddressByte(uint8_t value)
    {
        // Override and implement this function in Screen1
    }
    

    /*
     * Virtual Action Handlers
     */
    virtual void functionSaveAddresses()
    {
        // Override and implement this function in ScreenIPAddresses
    }
    virtual void functionRevertAddresses()
    {
        // Override and implement this function in ScreenIPAddresses
    }
    virtual void functionUpdateSelectedAddressWithCounter()
    {
        // Override and implement this function in ScreenIPAddresses
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box boxSettings1Background;
    touchgfx::Box boxMainTitleBackground;
    touchgfx::TextArea textAreaZWaveSentinel;
    touchgfx::TextArea textAreaIPAddresses;
    touchgfx::ButtonWithLabel buttonWithLabelIPAddressReturn;
    touchgfx::TextArea textAreaAddressTitle;
    touchgfx::TextArea textAreaDNSTitle;
    touchgfx::TextArea textAreaGatewayTitle;
    touchgfx::TextArea textAreaNetmaskTitle;
    touchgfx::ButtonWithLabel buttonWithLabelIPAddressRevert;
    touchgfx::ButtonWithLabel buttonWithLabelIPAddressApply;
    touchgfx::Container containerIP_Netmask1;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonNetmask1;
    touchgfx::TextAreaWithOneWildcard textAreaNetmask1;
    touchgfx::Container containerIP_Netmask2;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonNetmask2;
    touchgfx::TextAreaWithOneWildcard textAreaNetmask2;
    touchgfx::Container containerIP_Netmask3;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonNetmask3;
    touchgfx::TextAreaWithOneWildcard textAreaNetmask3;
    touchgfx::Container containerIP_Netmask4;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonNetmask4;
    touchgfx::TextAreaWithOneWildcard textAreaNetmask4;
    touchgfx::Container containerIP_Gateway1;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonGateway1;
    touchgfx::TextAreaWithOneWildcard textAreaGateway1;
    touchgfx::Container containerIP_Gateway2;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonGateway2;
    touchgfx::TextAreaWithOneWildcard textAreaGateway2;
    touchgfx::Container containerIP_Gateway3;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonGateway3;
    touchgfx::TextAreaWithOneWildcard textAreaGateway3;
    touchgfx::Container containerIP_Gateway4;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonGateway4;
    touchgfx::TextAreaWithOneWildcard textAreaGateway4;
    touchgfx::Container containerIP_DNS1;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonDNS1;
    touchgfx::TextAreaWithOneWildcard textAreaDNS1;
    touchgfx::Container containerIP_DNS2;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonDNS2;
    touchgfx::TextAreaWithOneWildcard textAreaDNS2;
    touchgfx::Container containerIP_DNS3;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonDNS3;
    touchgfx::TextAreaWithOneWildcard textAreaDNS3;
    touchgfx::Container containerIP_DNS4;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonDNS4;
    touchgfx::TextAreaWithOneWildcard textAreaDNS4;
    touchgfx::Container containerIP_Address1;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonIPAddress1;
    touchgfx::TextAreaWithOneWildcard textAreaIPAddress1;
    touchgfx::Container containerIP_Address2;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonIPAddress2;
    touchgfx::TextAreaWithOneWildcard textAreaIPAddress2;
    touchgfx::Container containerIP_Address3;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonIPAddress3;
    touchgfx::TextAreaWithOneWildcard textAreaIPAddress3;
    touchgfx::Container containerIP_Address4;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonIPAddress4;
    touchgfx::TextAreaWithOneWildcard textAreaIPAddress4;
    touchgfx::TextArea textAreaIPAddressStatus;
    NumberPICKER numberPICKERAddress;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TEXTAREANETMASK1_SIZE = 4;
    touchgfx::Unicode::UnicodeChar textAreaNetmask1Buffer[TEXTAREANETMASK1_SIZE];
    static const uint16_t TEXTAREANETMASK2_SIZE = 4;
    touchgfx::Unicode::UnicodeChar textAreaNetmask2Buffer[TEXTAREANETMASK2_SIZE];
    static const uint16_t TEXTAREANETMASK3_SIZE = 4;
    touchgfx::Unicode::UnicodeChar textAreaNetmask3Buffer[TEXTAREANETMASK3_SIZE];
    static const uint16_t TEXTAREANETMASK4_SIZE = 4;
    touchgfx::Unicode::UnicodeChar textAreaNetmask4Buffer[TEXTAREANETMASK4_SIZE];
    static const uint16_t TEXTAREAGATEWAY1_SIZE = 4;
    touchgfx::Unicode::UnicodeChar textAreaGateway1Buffer[TEXTAREAGATEWAY1_SIZE];
    static const uint16_t TEXTAREAGATEWAY2_SIZE = 4;
    touchgfx::Unicode::UnicodeChar textAreaGateway2Buffer[TEXTAREAGATEWAY2_SIZE];
    static const uint16_t TEXTAREAGATEWAY3_SIZE = 4;
    touchgfx::Unicode::UnicodeChar textAreaGateway3Buffer[TEXTAREAGATEWAY3_SIZE];
    static const uint16_t TEXTAREAGATEWAY4_SIZE = 4;
    touchgfx::Unicode::UnicodeChar textAreaGateway4Buffer[TEXTAREAGATEWAY4_SIZE];
    static const uint16_t TEXTAREADNS1_SIZE = 4;
    touchgfx::Unicode::UnicodeChar textAreaDNS1Buffer[TEXTAREADNS1_SIZE];
    static const uint16_t TEXTAREADNS2_SIZE = 4;
    touchgfx::Unicode::UnicodeChar textAreaDNS2Buffer[TEXTAREADNS2_SIZE];
    static const uint16_t TEXTAREADNS3_SIZE = 4;
    touchgfx::Unicode::UnicodeChar textAreaDNS3Buffer[TEXTAREADNS3_SIZE];
    static const uint16_t TEXTAREADNS4_SIZE = 4;
    touchgfx::Unicode::UnicodeChar textAreaDNS4Buffer[TEXTAREADNS4_SIZE];
    static const uint16_t TEXTAREAIPADDRESS1_SIZE = 4;
    touchgfx::Unicode::UnicodeChar textAreaIPAddress1Buffer[TEXTAREAIPADDRESS1_SIZE];
    static const uint16_t TEXTAREAIPADDRESS2_SIZE = 4;
    touchgfx::Unicode::UnicodeChar textAreaIPAddress2Buffer[TEXTAREAIPADDRESS2_SIZE];
    static const uint16_t TEXTAREAIPADDRESS3_SIZE = 4;
    touchgfx::Unicode::UnicodeChar textAreaIPAddress3Buffer[TEXTAREAIPADDRESS3_SIZE];
    static const uint16_t TEXTAREAIPADDRESS4_SIZE = 4;
    touchgfx::Unicode::UnicodeChar textAreaIPAddress4Buffer[TEXTAREAIPADDRESS4_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<ScreenIPAddressesViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<ScreenIPAddressesViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

    /*
     * Tick Counter Declarations
     */
    static const uint32_t TICK_INTERACTIONUPDATESELECTEDADDRESSWITHCOUNTER_INTERVAL = 15;
    uint32_t frameCountInteractionUpdateSelectedAddressWithCounterInterval;

};

#endif // SCREENIPADDRESSESVIEWBASE_HPP
